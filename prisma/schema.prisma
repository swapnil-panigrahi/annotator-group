generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String        @id @db.Uuid
  name               String
  email              String        @unique
  createdAt          DateTime      @default(now())
  annotations        Annotation[]
  settings           Settings?
  summaryAssignments UserSummary[]
  groupAssignments   UserGroup[]
  groupAnnotations   AnnotationGroup[]

  @@map("profiles")
}

model TextSummary {
  id              String        @id @default(uuid()) @db.Uuid
  text            String
  summary         String
  createdAt       DateTime      @default(now())
  level           Level?
  model           Model?
  pmid            String?
  annotations     Annotation[]
  userAssignments UserSummary[]
}

model UserSummary {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @db.Uuid
  summaryId    String      @db.Uuid
  assignedAt   DateTime    @default(now())
  completed    Boolean     @default(false)
  annotationId String?     @db.Uuid
  annotation   Annotation? @relation(fields: [annotationId], references: [id])
  textSummary  TextSummary @relation(fields: [summaryId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Annotation {
  id                String        @id @default(uuid()) @db.Uuid
  userId            String        @db.Uuid
  textSummaryId     String        @db.Uuid
  comprehensiveness Int           @default(0)
  layness           Int           @default(0)
  factuality        Int           @default(0)
  usefulness        Int           @default(0)
  labels            Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  textSummary       TextSummary   @relation(fields: [textSummaryId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSummary       UserSummary[]

  @@unique([userId, textSummaryId])
}

// New Group-based models
model AbstractGroup {
  id            String        @id @default(uuid()) @db.Uuid
  pmid          String?
  abstractText  String
  level         String?
  created_at    DateTime      @default(now())
  summaries     SummaryGroup[]
  userGroups    UserGroup[]
  annotations   AnnotationGroup[]
}

model SummaryGroup {
  id          String        @id @default(uuid()) @db.Uuid
  abstractID  String        @db.Uuid
  summaryType String?
  summary     String
  created_at  DateTime      @default(now())
  abstract    AbstractGroup @relation(fields: [abstractID], references: [id], onDelete: Cascade)
  userGroups  UserGroup[]
  annotations AnnotationGroup[]
}

model UserGroup {
  id           String        @id @default(uuid()) @db.Uuid
  userID       String        @db.Uuid
  summaryID    String        @db.Uuid
  annotationID String?       @db.Uuid
  assignedAt   DateTime      @default(now())
  completed    Boolean       @default(false)
  abstractID   String        @db.Uuid
  user         User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  summary      SummaryGroup  @relation(fields: [summaryID], references: [id], onDelete: Cascade)
  abstract     AbstractGroup @relation(fields: [abstractID], references: [id], onDelete: Cascade)
  annotation   AnnotationGroup? @relation(fields: [annotationID], references: [id])
}

model AnnotationGroup {
  id                String      @id @default(uuid()) @db.Uuid
  userID            String      @db.Uuid
  abstractID        String      @db.Uuid
  summaryID         String      @db.Uuid
  comprehensiveness Int?
  layness           Int?
  factuality        Int?
  created_at        DateTime    @default(now())
  updated_at        DateTime?   @updatedAt
  user              User        @relation(fields: [userID], references: [id], onDelete: Cascade)
  abstract          AbstractGroup @relation(fields: [abstractID], references: [id], onDelete: Cascade)
  summary           SummaryGroup @relation(fields: [summaryID], references: [id], onDelete: Cascade)
  userGroups        UserGroup[]

  @@unique([userID, summaryID], name: "userID_summaryID")
}

model Settings {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @unique @db.Uuid
  summaryWindowDays Int     @default(7)
  isAdmin           Boolean @default(false)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Level {
  LAYMAN
  PREMED
  RESEARCHER
  EXPERT
}

enum Model {
  GPT4
  GPT35
  CLAUDE2
  CLAUDE3
  LLAMA2
  MISTRAL
  GPT4O
}
